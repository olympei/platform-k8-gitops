# Example usage of Secrets Store CSI Driver with AWS Provider
# This example shows how to mount AWS Secrets Manager and SSM Parameter Store secrets as volumes

---
# SecretProviderClass defines which secrets to mount and how
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: app-secrets
  namespace: default
spec:
  provider: aws
  parameters:
    region: us-east-1
    objects: |
      - objectName: "dev/myapp/database"
        objectType: "secretsmanager"
        objectAlias: "database-credentials"
        objectVersion: "AWSCURRENT"
      - objectName: "/dev/myapp/api-key"
        objectType: "ssmparameter"
        objectAlias: "api-key"
      - objectName: "/dev/myapp/config"
        objectType: "ssmparameter"
        objectAlias: "app-config"
  # Optional: Sync mounted secrets to Kubernetes secrets
  secretObjects:
    - secretName: app-database-secret
      type: Opaque
      data:
        - objectName: "database-credentials"
          key: "password"
    - secretName: app-api-secret
      type: Opaque
      data:
        - objectName: "api-key"
          key: "api-key"

---
# Example Pod using the SecretProviderClass
apiVersion: v1
kind: Pod
metadata:
  name: app-pod
  namespace: default
spec:
  serviceAccountName: app-service-account
  containers:
    - name: app
      image: nginx:latest
      volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets"
          readOnly: true
      env:
        # Use synced Kubernetes secret
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-database-secret
              key: password
        # Or read directly from mounted volume
        - name: API_KEY
          value: "$(cat /mnt/secrets/api-key)"
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "app-secrets"

---
# Service Account with proper annotations for Pod Identity or IRSA
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-service-account
  namespace: default
  annotations:
    # For Pod Identity
    eks.amazonaws.com/pod-identity-association-role-arn: "arn:aws:iam::ACCOUNT_ID:role/EKS-SecretsStore-Role-dev"
    # For IRSA (alternative)
    # eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/EKS-SecretsStore-Role-dev"

---
# Example Deployment using secrets
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      serviceAccountName: app-service-account
      containers:
        - name: app
          image: nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: secrets-store
              mountPath: "/mnt/secrets"
              readOnly: true
          env:
            - name: DB_HOST
              value: "database.example.com"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-database-secret
                  key: password
          # Health checks
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "app-secrets"

---
# Example of secret rotation - the CSI driver will automatically
# update the mounted secrets when they change in AWS
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: rotating-secrets
  namespace: default
spec:
  provider: aws
  parameters:
    region: us-east-1
    objects: |
      - objectName: "dev/myapp/rotating-token"
        objectType: "secretsmanager"
        objectAlias: "rotating-token"
        # Automatically get the latest version
        objectVersion: "AWSCURRENT"
  secretObjects:
    - secretName: rotating-token-secret
      type: Opaque
      data:
        - objectName: "rotating-token"
          key: "token"